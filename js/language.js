// Language Selection JavaScript

let selectedLanguage = null;
let allLanguages = [];
let currentPreviewLanguage = null;

// Indian Language data with translations
const languageData = {
    hi: {
        name: 'Hindi',
        nativeName: 'рд╣рд┐рдиреНрджреА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'North India',
        speakers: '600M+',
        translations: {
            welcome: 'CropGuard AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
            features: 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдлрд╕рд▓ рд░реЛрдЧ рдкрд╣рдЪрд╛рди',
            dashboard: 'рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рдбреИрд╢рдмреЛрд░реНрдб',
            selectLanguage: 'рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
            languageDescription: 'CropGuard AI рдХреЗ рд╕рд╛рде рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
            searchLanguages: 'рднрд╛рд╖рд╛рдПрдВ рдЦреЛрдЬреЗрдВ...',
            popularLanguages: 'рд▓реЛрдХрдкреНрд░рд┐рдп рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рдПрдВ',
            allLanguages: 'рд╕рднреА рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рдПрдВ',
            continue: 'рдЬрд╛рд░реА рд░рдЦреЗрдВ',
            languageNote: 'рдЖрдк рдХрд┐рд╕реА рднреА рд╕рдордп рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдореЗрдВ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВ',
            preview: 'рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди',
            sampleText: 'рдирдореВрдирд╛ рдкрд╛рда',
            selectThis: 'рдЗрд╕ рднрд╛рд╖рд╛ рдХреЛ рдЪреБрдиреЗрдВ',
            confirmLanguage: 'рднрд╛рд╖рд╛ рдЪрдпрди рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
            confirmMessage: 'рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЗрд╕реЗ рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдХреЗ рд░реВрдк рдореЗрдВ рд╕реЗрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?',
            cancel: 'рд░рджреНрдж рдХрд░реЗрдВ',
            confirm: 'рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
            signin: 'рд╕рд╛рдЗрди рдЗрди'
        }
    },
    en: {
        name: 'English',
        nativeName: 'English',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Pan India',
        speakers: '130M+',
        translations: {
            welcome: 'Welcome to CropGuard AI',
            features: 'AI-powered crop disease detection',
            dashboard: 'Your farming dashboard',
            selectLanguage: 'Select Your Language',
            languageDescription: 'Choose your preferred language to continue with CropGuard AI',
            searchLanguages: 'Search languages...',
            popularLanguages: 'Popular Indian Languages',
            allLanguages: 'All Indian Languages',
            continue: 'Continue',
            languageNote: 'You can change your language preference anytime in settings',
            preview: 'Preview',
            sampleText: 'Sample Text',
            selectThis: 'Select This Language',
            confirmLanguage: 'Confirm Language Selection',
            confirmMessage: 'Are you sure you want to set this as your preferred language?',
            cancel: 'Cancel',
            confirm: 'Confirm',
            signin: 'Sign In'
        }
    },
    bn: {
        name: 'Bengali',
        nativeName: 'ржмрж╛ржВрж▓рж╛',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'West Bengal, Tripura',
        speakers: '97M+',
        translations: {
            welcome: 'CropGuard AI рждрзЗ рж╕рзНржмрж╛ржЧрждржо',
            features: 'AI-ржЪрж╛рж▓рж┐ржд ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг',
            dashboard: 'ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
            selectLanguage: 'ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
            languageDescription: 'CropGuard AI ржПрж░ рж╕рж╛ржерзЗ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
            searchLanguages: 'ржнрж╛рж╖рж╛ ржЦрзБржБржЬрзБржи...',
            popularLanguages: 'ржЬржиржкрзНрж░рж┐ржпрж╝ ржнрж╛рж░рждрзАржпрж╝ ржнрж╛рж╖рж╛',
            allLanguages: 'рж╕ржХрж▓ ржнрж╛рж░рждрзАржпрж╝ ржнрж╛рж╖рж╛',
            continue: 'ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи',
            languageNote: 'ржЖржкржирж┐ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛рж░ ржкржЫржирзНржж ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи',
            preview: 'ржкрзВрж░рзНржмрж░рзВржк',
            sampleText: 'ржиржорзБржирж╛ ржЯрзЗржХрзНрж╕ржЯ',
            selectThis: 'ржПржЗ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
            confirmLanguage: 'ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи',
            confirmMessage: 'ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржПржЯрж┐ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рждрзЗ ржЪрж╛ржи?',
            cancel: 'ржмрж╛рждрж┐рж▓',
            confirm: 'ржирж┐рж╢рзНржЪрж┐ржд',
            signin: 'рж╕рж╛ржЗржи ржЗржи'
        }
    },
    te: {
        name: 'Telugu',
        nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Andhra Pradesh, Telangana',
        speakers: '75M+',
        translations: {
            welcome: 'CropGuard AI р░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В',
            features: 'AI-р░Жр░зр░╛р░░р░┐р░д р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б',
            dashboard: 'р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░бр▒Нр░пр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н',
            selectLanguage: 'р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
            languageDescription: 'CropGuard AI р░др▒Л р░Хр▒Кр░ир░╕р░╛р░Чр░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░Зр░╖р▒Нр░Яр░ор▒Ир░и р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
            searchLanguages: 'р░нр░╛р░╖р░▓р░ир▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐...',
            popularLanguages: 'р░кр▒Нр░░р░ор▒Бр░Ц р░нр░╛р░░р░др▒Ар░п р░нр░╛р░╖р░▓р▒Б',
            allLanguages: 'р░Ер░ир▒Нр░ир░┐ р░нр░╛р░░р░др▒Ар░п р░нр░╛р░╖р░▓р▒Б',
            continue: 'р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐',
            languageNote: 'р░ор▒Ар░░р▒Б р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р░▓р▒Л р░ор▒А р░нр░╛р░╖ р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░др░ир▒Б р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б',
            preview: 'р░кр▒Нр░░р░┐р░╡р▒Нр░пр▒В',
            sampleText: 'р░ир░ор▒Вр░ир░╛ р░╡р░Ър░ир░В',
            selectThis: 'р░И р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
            confirmLanguage: 'р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Хр░ир▒Б р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐',
            confirmMessage: 'р░ор▒Ар░░р▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░ор▒А р░Зр░╖р▒Нр░Яр░ор▒Ир░и р░нр░╛р░╖р░Чр░╛ р░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░╛р░▓р░ир░┐ р░ор▒Ар░░р▒Б р░ир░┐р░Ьр░Вр░Чр░╛ р░Ер░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р░╛?',
            cancel: 'р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
            confirm: 'р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐',
            signin: 'р░╕р▒Ир░ир▒Н р░Зр░ир▒Н'
        }
    },
    mr: {
        name: 'Marathi',
        nativeName: 'рдорд░рд╛рдареА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Maharashtra, Goa',
        speakers: '72M+',
        translations: {
            welcome: 'CropGuard AI рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ',
            features: 'AI-рдЖрдзрд╛рд░рд┐рдд рдкреАрдХ рд░реЛрдЧ рдУрд│рдЦ',
            dashboard: 'рддреБрдордЪрд╛ рд╢реЗрддрдХреА рдбреЕрд╢рдмреЛрд░реНрдб',
            selectLanguage: 'рддреБрдордЪреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛',
            languageDescription: 'CropGuard AI рд╕рд╣ рдЪрд╛рд▓реВ рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рддреБрдордЪреА рдЖрд╡рдбрддреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛',
            searchLanguages: 'рднрд╛рд╖рд╛ рд╢реЛрдзрд╛...',
            popularLanguages: 'рд▓реЛрдХрдкреНрд░рд┐рдп рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛',
            allLanguages: 'рд╕рд░реНрд╡ рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛',
            continue: 'рдЪрд╛рд▓реВ рдареЗрд╡рд╛',
            languageNote: 'рддреБрдореНрд╣реА рдХрдзреАрд╣реА рд╕реЗрдЯрд┐рдВрдЧреНрдЬрдордзреНрдпреЗ рддреБрдордЪреА рднрд╛рд╖рд╛ рдкреНрд░рд╛рдзрд╛рдиреНрдп рдмрджрд▓реВ рд╢рдХрддрд╛',
            preview: 'рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди',
            sampleText: 'рдирдореБрдирд╛ рдордЬрдХреВрд░',
            selectThis: 'рд╣реА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛',
            confirmLanguage: 'рднрд╛рд╖рд╛ рдирд┐рд╡рдбреАрдЪреА рдкреБрд╖реНрдЯреА рдХрд░рд╛',
            confirmMessage: 'рддреБрдореНрд╣рд╛рд▓рд╛ рдЦрд░реЛрдЦрд░ рд╣реЗ рддреБрдордЪреА рдЖрд╡рдбрддреА рднрд╛рд╖рд╛ рдореНрд╣рдгреВрди рд╕реЗрдЯ рдХрд░рд╛рдпрдЪреЗ рдЖрд╣реЗ рдХрд╛?',
            cancel: 'рд░рджреНрдж рдХрд░рд╛',
            confirm: 'рдкреБрд╖реНрдЯреА рдХрд░рд╛',
            signin: 'рд╕рд╛рдЗрди рдЗрди'
        }
    },
    ta: {
        name: 'Tamil',
        nativeName: 'родрооро┐ро┤рпН',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Tamil Nadu, Puducherry',
        speakers: '68M+',
        translations: {
            welcome: 'CropGuard AI роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН',
            features: 'AI-роЖро▓рпН роЗропроЩрпНроХрпБроорпН рокропро┐ро░рпН роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН',
            dashboard: 'роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ',
            selectLanguage: 'роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
            languageDescription: 'CropGuard AI роЙроЯройрпН родрпКроЯро░ роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
            searchLanguages: 'роорпКро┤ро┐роХро│рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН...',
            popularLanguages: 'рокро┐ро░рокро▓рооро╛рой роЗроирпНродро┐роп роорпКро┤ро┐роХро│рпН',
            allLanguages: 'роЕройрпИродрпНродрпБ роЗроирпНродро┐роп роорпКро┤ро┐роХро│рпН',
            continue: 'родрпКроЯро░ро╡рпБроорпН',
            languageNote: 'роирпАроЩрпНроХро│рпН роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН роЕроорпИрокрпНрокрпБроХро│ро┐ро▓рпН роЙроЩрпНроХро│рпН роорпКро┤ро┐ ро╡ро┐ро░рпБрокрпНрокродрпНродрпИ рооро╛ро▒рпНро▒ро▓ро╛роорпН',
            preview: 'роорпБройрпНройрпЛроЯрпНроЯроорпН',
            sampleText: 'рооро╛родро┐ро░ро┐ роЙро░рпИ',
            selectThis: 'роЗроирпНрод роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
            confirmLanguage: 'роорпКро┤ро┐родрпН родрпЗро░рпНро╡рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро╡рпБроорпН',
            confirmMessage: 'роЗродрпИ роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропро╛роХ роЕроорпИроХрпНроХ роирпАроЩрпНроХро│рпН роиро┐роЪрпНроЪропрооро╛роХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛?',
            cancel: 'ро░родрпНродрпБ роЪрпЖропрпН',
            confirm: 'роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродрпБ',
            signin: 'роЙро│рпНроирпБро┤рпИ'
        }
    },
    gu: {
        name: 'Gujarati',
        nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Gujarat, Dadra & Nagar Haveli',
        speakers: '46M+',
        translations: {
            welcome: 'CropGuard AI ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ',
            features: 'AI-рк╕ркВркЪрк╛рк▓рк┐ркд рккрк╛ркХ рк░рлЛркЧ рк╢рлЛркз',
            dashboard: 'ркдркорк╛рк░рлБркВ ркЦрлЗркдрлА ркбрлЗрк╢ркмрлЛрк░рлНркб',
            selectLanguage: 'ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
            languageDescription: 'CropGuard AI рк╕рк╛ркерлЗ ркЪрк╛рк▓рлБ рк░рк╛ркЦрк╡рк╛ ркорк╛ркЯрлЗ ркдркорк╛рк░рлА рккрк╕ркВркжрлАркжрк╛ ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
            searchLanguages: 'ркнрк╛рк╖рк╛ркУ рк╢рлЛркзрлЛ...',
            popularLanguages: 'рк▓рлЛркХрккрлНрк░рк┐ркп ркнрк╛рк░ркдрлАркп ркнрк╛рк╖рк╛ркУ',
            allLanguages: 'ркмркзрлА ркнрк╛рк░ркдрлАркп ркнрк╛рк╖рк╛ркУ',
            continue: 'ркЪрк╛рк▓рлБ рк░рк╛ркЦрлЛ',
            languageNote: 'ркдркорлЗ ркХрлЛркИрккркг рк╕ркоркпрлЗ рк╕рлЗркЯрк┐ркВркЧрлНрк╕ркорк╛ркВ ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркжркЧрлА ркмркжрк▓рлА рк╢ркХрлЛ ркЫрлЛ',
            preview: 'рккрлВрк░рлНрк╡рк╛рк╡рк▓рлЛркХрки',
            sampleText: 'ркиркорлБркирк╛ рк▓ркЦрк╛ркг',
            selectThis: 'ркЖ ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
            confirmLanguage: 'ркнрк╛рк╖рк╛ рккрк╕ркВркжркЧрлАркирлА рккрлБрк╖рлНркЯрк┐ ркХрк░рлЛ',
            confirmMessage: 'рк╢рлБркВ ркдркорлЗ ркЦрк░рлЗркЦрк░ ркЖркирлЗ ркдркорк╛рк░рлА рккрк╕ркВркжрлАркжрк╛ ркнрк╛рк╖рк╛ ркдрк░рлАркХрлЗ рк╕рлЗркЯ ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?',
            cancel: 'рк░ркж ркХрк░рлЛ',
            confirm: 'рккрлБрк╖рлНркЯрк┐ ркХрк░рлЛ',
            signin: 'рк╕рк╛ркЗрки ркЗрки'
        }
    },
    kn: {
        name: 'Kannada',
        nativeName: 'р▓Хр▓ир│Нр▓ир▓б',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Karnataka',
        speakers: '44M+',
        translations: {
            welcome: 'CropGuard AI р▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д',
            features: 'AI-р▓Ър▓╛р▓▓р▓┐р▓д р▓мр│Жр▓│р│Ж р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж',
            dashboard: 'р▓ир▓┐р▓ор│Нр▓о р▓Хр│Гр▓╖р▓┐ р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│Н',
            selectLanguage: 'р▓ир▓┐р▓ор│Нр▓о р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
            languageDescription: 'CropGuard AI р▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ор│Бр▓Вр▓жр│Бр▓╡р▓░р▓┐р▓пр▓▓р│Б р▓ир▓┐р▓ор│Нр▓о р▓Жр▓жр│Нр▓пр▓др│Жр▓п р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
            searchLanguages: 'р▓нр▓╛р▓╖р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐...',
            popularLanguages: 'р▓Ьр▓ир▓кр│Нр▓░р▓┐р▓п р▓нр▓╛р▓░р▓др│Ар▓п р▓нр▓╛р▓╖р│Жр▓Чр▓│р│Б',
            allLanguages: 'р▓Ор▓▓р│Нр▓▓р▓╛ р▓нр▓╛р▓░р▓др│Ар▓п р▓нр▓╛р▓╖р│Жр▓Чр▓│р│Б',
            continue: 'р▓ор│Бр▓Вр▓жр│Бр▓╡р▓░р▓┐р▓╕р▓┐',
            languageNote: 'р▓ир│Ар▓╡р│Б р▓пр▓╛р▓╡р│Бр▓жр│З р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор│Нр▓о р▓нр▓╛р▓╖р│Жр▓п р▓Жр▓жр│Нр▓пр▓др│Жр▓пр▓ир│Нр▓ир│Б р▓мр▓жр▓▓р▓╛р▓пр▓┐р▓╕р▓мр▓╣р│Бр▓жр│Б',
            preview: 'р▓кр│Вр▓░р│Нр▓╡р▓╡р│Ар▓Хр│Нр▓╖р▓гр│Ж',
            sampleText: 'р▓ор▓╛р▓жр▓░р▓┐ р▓кр▓ар│Нр▓п',
            selectThis: 'р▓И р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
            confirmLanguage: 'р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓пр▓ир│Нр▓ир│Б р▓жр│Гр▓вр│Ар▓Хр▓░р▓┐р▓╕р▓┐',
            confirmMessage: 'р▓ир│Ар▓╡р│Б р▓ир▓┐р▓Ьр▓╡р▓╛р▓Чр▓┐р▓пр│В р▓Зр▓жр▓ир│Нр▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓Жр▓жр│Нр▓пр▓др│Жр▓п р▓нр▓╛р▓╖р│Жр▓пр▓╛р▓Чр▓┐ р▓╣р│Кр▓Вр▓жр▓┐р▓╕р▓▓р│Б р▓мр▓пр▓╕р│Бр▓╡р▓┐р▓░р▓╛?',
            cancel: 'р▓░р▓жр│Нр▓жр│Бр▓ор▓╛р▓бр▓┐',
            confirm: 'р▓жр│Гр▓вр│Ар▓Хр▓░р▓┐р▓╕р▓┐',
            signin: 'р▓╕р│Ир▓ир│Н р▓Зр▓ир│Н'
        }
    },
    ml: {
        name: 'Malayalam',
        nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Kerala, Lakshadweep',
        speakers: '33M+',
        translations: {
            welcome: 'CropGuard AI-р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В',
            features: 'AI-р┤кр┤╡р╡╝р┤бр╡Н р┤╡р┤┐р┤│ р┤░р╡Лр┤Ч р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜',
            dashboard: 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр╡Гр┤╖р┤┐ р┤бр┤╛р┤╖р╡Нр┤мр╡Лр╡╝р┤бр╡Н',
            selectLanguage: 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
            languageDescription: 'CropGuard AI-р┤пр╡Бр┤ор┤╛р┤пр┤┐ р┤др╡Бр┤Яр┤░р┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤╖р╡Нр┤Яр┤ор╡Бр┤│р╡Нр┤│ р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
            searchLanguages: 'р┤нр┤╛р┤╖р┤Хр╡╛ р┤др┤┐р┤░р┤пр╡Бр┤Х...',
            popularLanguages: 'р┤Ьр┤ир┤кр╡Нр┤░р┤┐р┤п р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤нр┤╛р┤╖р┤Хр╡╛',
            allLanguages: 'р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤нр┤╛р┤╖р┤Хр┤│р╡Бр┤В',
            continue: 'р┤др╡Бр┤Яр┤░р╡Бр┤Х',
            languageNote: 'р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Ор┤кр╡Нр┤кр╡Лр╡╛ р┤╡р╡Зр┤гр┤ор╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤╕р╡Жр┤▒р╡Нр┤▒р┤┐р┤Вр┤Чр╡Нр┤╕р┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤╛р┤╖р┤╛ р┤ор╡Бр╡╗р┤Чр┤гр┤и р┤ор┤╛р┤▒р╡Нр┤▒р┤╛р┤В',
            preview: 'р┤кр╡Нр┤░р┤┐р┤╡р╡Нр┤пр╡В',
            sampleText: 'р┤╕р┤╛р┤ор╡Нр┤кр┤┐р╡╛ р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н',
            selectThis: 'р┤И р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
            confirmLanguage: 'р┤нр┤╛р┤╖р┤╛ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
            confirmMessage: 'р┤Зр┤др╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤╖р╡Нр┤Яр┤ор╡Бр┤│р╡Нр┤│ р┤нр┤╛р┤╖р┤пр┤╛р┤пр┤┐ р┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤╢р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤В р┤Жр┤Чр╡Нр┤░р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Бр┤гр╡Нр┤Яр╡Л?',
            cancel: 'р┤▒р┤жр╡Нр┤жр┤╛р┤Хр╡Нр┤Хр╡Бр┤Х',
            confirm: 'р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
            signin: 'р┤╕р╡Ир╡╗ р┤Зр╡╗'
        }
    },
    pa: {
        name: 'Punjabi',
        nativeName: 'рикрй░риЬри╛римрйА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Punjab, Chandigarh',
        speakers: '28M+',
        translations: {
            welcome: 'CropGuard AI ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕ри╡ри╛риЧрид ри╣рйИ',
            features: 'AI-ри╕рй░риЪри╛ри▓ри┐рид рилри╕ри▓ рижрйА римри┐риори╛ри░рйА рижрйА рикриЫри╛риг',
            dashboard: 'ридрйБри╣ри╛рибри╛ риЦрйЗридрйАримри╛рйЬрйА рибрйИри╕ри╝римрйЛри░риб',
            selectLanguage: 'риЖрикригрйА ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ',
            languageDescription: 'CropGuard AI рижрйЗ риири╛ри▓ риЬри╛ри░рйА ри░рй▒риЦриг ри▓риИ риЖрикригрйА рикри╕рй░рижрйАрижри╛ ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ',
            searchLanguages: 'ринри╛ри╕ри╝ри╛ри╡ри╛риВ рижрйА риЦрйЛриЬ риХри░рйЛ...',
            popularLanguages: 'рикрйНри░ри╕ри┐рй▒риз ринри╛ри░ридрйА ринри╛ри╕ри╝ри╛ри╡ри╛риВ',
            allLanguages: 'ри╕ри╛ри░рйАриЖриВ ринри╛ри░ридрйА ринри╛ри╕ри╝ри╛ри╡ри╛риВ',
            continue: 'риЬри╛ри░рйА ри░рй▒риЦрйЛ',
            languageNote: 'ридрйБри╕рйАриВ риХри┐ри╕рйЗ ри╡рйА ри╕риорйЗриВ ри╕рйИриЯри┐рй░риЧри╛риВ ри╡ри┐рй▒риЪ риЖрикригрйА ринри╛ри╕ри╝ри╛ рижрйА ридри░риЬрйАри╣ римрижри▓ ри╕риХрижрйЗ ри╣рйЛ',
            preview: 'рикрйНри░рйАри╡ри┐риК',
            sampleText: 'риириорйВриири╛ рикри╛риа',
            selectThis: 'риЗри╕ ринри╛ри╕ри╝ри╛ риирйВрй░ риЪрйБригрйЛ',
            confirmLanguage: 'ринри╛ри╕ри╝ри╛ риЪрйЛриг рижрйА рикрйБри╕ри╝риЯрйА риХри░рйЛ',
            confirmMessage: 'риХрйА ридрйБри╕рйАриВ ри╕рй▒риЪриорйБрй▒риЪ риЗри╕риирйВрй░ риЖрикригрйА рикри╕рй░рижрйАрижри╛ ринри╛ри╕ри╝ри╛ ри╡риЬрйЛриВ ри╕рйИрй▒риЯ риХри░риири╛ риЪри╛ри╣рйБрй░рижрйЗ ри╣рйЛ?',
            cancel: 'ри░рй▒риж риХри░рйЛ',
            confirm: 'рикрйБри╕ри╝риЯрйА риХри░рйЛ',
            signin: 'ри╕ри╛риЗрии риЗрии'
        }
    },
    or: {
        name: 'Odia',
        nativeName: 'рмУрмбрм╝рм┐рмЖ',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Odisha',
        speakers: '37M+',
        translations: {
            welcome: 'CropGuard AI рм░рнЗ рмЖрмкрмгрмЩрнНрмХрнБ рм╕рнНрн▒рм╛рмЧрмд',
            features: 'AI-рмЪрм╛рм│рм┐рмд рмлрм╕рм▓ рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ',
            dashboard: 'рмЖрмкрмгрмЩрнНрмХ рмХрнГрм╖рм┐ рмбрнНрнЯрм╛рм╕рммрнЛрм░рнНрмб',
            selectLanguage: 'рмЖрмкрмгрмЩрнНрмХ рмнрм╛рм╖рм╛ рммрм╛рмЫрмирнНрмдрнБ',
            languageDescription: 'CropGuard AI рм╕рм╣ рмЪрм╛рм▓рнБ рм░рмЦрм┐рммрм╛ рмкрм╛рмЗрмБ рмЖрмкрмгрмЩрнНрмХ рмкрм╕рмирнНрмжрм░ рмнрм╛рм╖рм╛ рммрм╛рмЫрмирнНрмдрнБ',
            searchLanguages: 'рмнрм╛рм╖рм╛рмЧрнБрмбрм╝рм┐рмХ рмЦрнЛрмЬрмирнНрмдрнБ...',
            popularLanguages: 'рм▓рнЛрмХрмкрнНрм░рм┐рнЯ рмнрм╛рм░рмдрнАрнЯ рмнрм╛рм╖рм╛рмЧрнБрмбрм╝рм┐рмХ',
            allLanguages: 'рм╕рморм╕рнНрмд рмнрм╛рм░рмдрнАрнЯ рмнрм╛рм╖рм╛рмЧрнБрмбрм╝рм┐рмХ',
            continue: 'рмЪрм╛рм▓рнБ рм░рмЦрмирнНрмдрнБ',
            languageNote: 'рмЖрмкрмг рмпрнЗрмХрнМрмгрм╕рм┐ рм╕рморнЯрм░рнЗ рм╕рнЗрмЯрм┐рмЩрнНрмЧрм░рнЗ рмЖрмкрмгрмЩрнНрмХ рмнрм╛рм╖рм╛ рмкрм╕рмирнНрмж рммрмжрм│рм╛рмЗ рмкрм╛рм░рм┐рммрнЗ',
            preview: 'рмкрнНрм░рм┐рмнрнНрнЯрнБ',
            sampleText: 'рмирморнБрмирм╛ рмкрм╛рмарнНрнЯ',
            selectThis: 'рмПрм╣рм┐ рмнрм╛рм╖рм╛ рммрм╛рмЫрмирнНрмдрнБ',
            confirmLanguage: 'рмнрм╛рм╖рм╛ рмЪрнЯрми рмирм┐рм╢рнНрмЪрм┐рмд рмХрм░рмирнНрмдрнБ',
            confirmMessage: 'рмЖрмкрмг рмкрнНрм░рмХрнГрмдрм░рнЗ рмПрм╣рм╛рмХрнБ рмЖрмкрмгрмЩрнНрмХ рмкрм╕рмирнНрмжрм░ рмнрм╛рм╖рм╛ рмнрм╛рммрм░рнЗ рм╕рнЗрмЯрнН рмХрм░рм┐рммрм╛рмХрнБ рмЪрм╛рм╣рнБрмБрмЫрмирнНрмдрм┐ рмХрм┐?',
            cancel: 'рммрм╛рмдрм┐рм▓рнН',
            confirm: 'рмирм┐рм╢рнНрмЪрм┐рмд рмХрм░рмирнНрмдрнБ',
            signin: 'рм╕рм╛рмЗрмирнН рмЗрмирнН'
        }
    },
    as: {
        name: 'Assamese',
        nativeName: 'ржЕрж╕ржорзАржпрж╝рж╛',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Assam',
        speakers: '15M+',
        translations: {
            welcome: 'CropGuard AI рж▓рзИ ржЖржкрзЛржирж╛ржХ рж╕рзНржмрж╛ржЧрждржо',
            features: 'AI-ржЪрж╛рж▓рж┐ржд рж╢рж╕рзНржп рз░рзЛржЧ ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг',
            dashboard: 'ржЖржкрзЛржирж╛рз░ ржХрзГрж╖рж┐ ржбрзЗржЫржм\'рз░рзНржб',
            selectLanguage: 'ржЖржкрзЛржирж╛рз░ ржнрж╛рж╖рж╛ ржмрж╛ржЫржирж┐ ржХрз░ржХ',
            languageDescription: 'CropGuard AI рз░ рж╕рзИрждрзЗ ржЖржЧржмрж╛ржврж╝рж┐ржмрж▓рзИ ржЖржкрзЛржирж╛рз░ ржкржЫржирзНржжрз░ ржнрж╛рж╖рж╛ ржмрж╛ржЫржирж┐ ржХрз░ржХ',
            searchLanguages: 'ржнрж╛рж╖рж╛рж╕ржорзВрж╣ ржмрж┐ржЪрж╛рз░ржХ...',
            popularLanguages: 'ржЬржиржкрзНрз░рж┐ржпрж╝ ржнрж╛рз░рждрзАржпрж╝ ржнрж╛рж╖рж╛рж╕ржорзВрж╣',
            allLanguages: 'рж╕ржХрж▓рзЛ ржнрж╛рз░рждрзАржпрж╝ ржнрж╛рж╖рж╛',
            continue: 'ржЖржЧржмрж╛ржврж╝ржХ',
            languageNote: 'ржЖржкрзБржирж┐ ржпрж┐ржХрзЛржирзЛ рж╕ржоржпрж╝рждрзЗ ржЫрзЗржЯрж┐ржВржЫржд ржЖржкрзЛржирж╛рз░ ржнрж╛рж╖рж╛рз░ ржкржЫржирзНржж рж╕рж▓ржирж┐ ржХрз░рж┐ржм ржкрж╛рз░рзЗ',
            preview: 'ржкрзВрз░рзНржмржжрз░рзНрж╢ржи',
            sampleText: 'ржиржорзБржирж╛ ржкрж╛ржа',
            selectThis: 'ржПржЗ ржнрж╛рж╖рж╛ ржмрж╛ржЫржирж┐ ржХрз░ржХ',
            confirmLanguage: 'ржнрж╛рж╖рж╛ ржирж┐рз░рзНржмрж╛ржЪржи ржирж┐рж╢рзНржЪрж┐ржд ржХрз░ржХ',
            confirmMessage: 'ржЖржкрзБржирж┐ рж╕ржБржЪрж╛ржХрзИржпрж╝рзЗ ржЗржпрж╝рж╛ржХ ржЖржкрзЛржирж╛рз░ ржкржЫржирзНржжрз░ ржнрж╛рж╖рж╛ рж╣рж┐ржЪрж╛ржкрзЗ ржЫрзЗржЯ ржХрз░рж┐ржм ржмрж┐ржЪрж╛рз░рзЗ ржирзЗржХрж┐?',
            cancel: 'ржмрж╛рждрж┐рж▓ ржХрз░ржХ',
            confirm: 'ржирж┐рж╢рзНржЪрж┐ржд ржХрз░ржХ',
            signin: 'ржЫрж╛ржЗржи ржЗржи'
        }
    },
    ur: {
        name: 'Urdu',
        nativeName: '╪з╪▒╪п┘И',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: true,
        region: 'Delhi, Uttar Pradesh, Bihar',
        speakers: '52M+',
        translations: {
            welcome: 'CropGuard AI ┘Е█М┌║ ╪в┘╛ ┌й╪з ╪о┘И╪┤ ╪в┘Е╪п█М╪п',
            features: 'AI ┘╛╪▒ ┘Е╪и┘Ж█М ┘Б╪╡┘Д ┌й█М ╪и█М┘Е╪з╪▒█М ┌й█М ╪к╪┤╪о█М╪╡',
            dashboard: '╪в┘╛ ┌й╪з ╪▓╪▒╪╣█М ┌И█М╪┤ ╪и┘И╪▒┌И',
            selectLanguage: '╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║',
            languageDescription: 'CropGuard AI ┌й█Т ╪│╪з╪к┌╛ ╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║',
            searchLanguages: '╪▓╪и╪з┘Ж█М┌║ ╪к┘Д╪з╪┤ ┌й╪▒█М┌║...',
            popularLanguages: '┘Е┘В╪и┘И┘Д █Б┘Ж╪п┘И╪│╪к╪з┘Ж█М ╪▓╪и╪з┘Ж█М┌║',
            allLanguages: '╪к┘Е╪з┘Е █Б┘Ж╪п┘И╪│╪к╪з┘Ж█М ╪▓╪и╪з┘Ж█М┌║',
            continue: '╪м╪з╪▒█М ╪▒┌й┌╛█М┌║',
            languageNote: '╪в┘╛ ┌й╪│█М ╪и┌╛█М ┘И┘В╪к ╪│█М┘╣┘Ж┌п╪▓ ┘Е█М┌║ ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┌й█М ╪к╪▒╪м█М╪н ╪к╪и╪п█М┘Д ┌й╪▒ ╪│┌й╪к█Т █Б█М┌║',
            preview: '┘╛█М╪┤ ┘Ж╪╕╪з╪▒█Б',
            sampleText: '┘Ж┘Е┘И┘Ж█Б ┘Е╪к┘Ж',
            selectThis: '█М█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║',
            confirmLanguage: '╪▓╪и╪з┘Ж ┌й█Т ╪з┘Ж╪к╪о╪з╪и ┌й█М ╪к╪╡╪п█М┘В ┌й╪▒█М┌║',
            confirmMessage: '┌й█М╪з ╪в┘╛ ┘И╪з┘В╪╣█М ╪з╪│█Т ╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┌й█Т ╪╖┘И╪▒ ┘╛╪▒ ╪│█М┘╣ ┌й╪▒┘Ж╪з ┌Ж╪з█Б╪к█Т █Б█М┌║╪Я',
            cancel: '┘Е┘Ж╪│┘И╪о ┌й╪▒█М┌║',
            confirm: '╪к╪╡╪п█М┘В ┌й╪▒█М┌║',
            signin: '╪│╪з╪ж┘Ж ╪з┘Ж'
        }
    },
    mai: {
        name: 'Maithili',
        nativeName: 'рдореИрдерд┐рд▓реА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Bihar, Jharkhand',
        speakers: '13M+',
        translations: {
            welcome: 'CropGuard AI рдореЗ рдЕрд╣рд╛рдБрдХ рд╕реНрд╡рд╛рдЧрдд рдЕрдЫрд┐',
            features: 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдлрд╕рд▓ рд░реЛрдЧ рдкрд╣рдЪрд╛рди',
            dashboard: 'рдЕрд╣рд╛рдБрдХ рдХреГрд╖рд┐ рдбреИрд╢рдмреЛрд░реНрдб',
            selectLanguage: 'рдЕрдкрди рднрд╛рд╖рд╛ рдЪреБрдиреВ',
            languageDescription: 'CropGuard AI рд╕рдБ рдЖрдЧреВ рдмрдврд╝рдмрд╛рдХ рд▓реЗрд▓ рдЕрдкрди рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреВ',
            searchLanguages: 'рднрд╛рд╖рд╛ рд╕рдн рдЦреЛрдЬреВ...',
            popularLanguages: 'рд▓реЛрдХрдкреНрд░рд┐рдп рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛ рд╕рдн',
            allLanguages: 'рд╕рдм рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛ рд╕рдн',
            continue: 'рдЖрдЧреВ рдмрдврд╝реВ',
            languageNote: 'рдЕрд╣рд╛рдБ рдХрд╣рд┐рдпреЛ рд╕реЗрдЯрд┐рдВрдЧ рдореЗ рдЕрдкрди рднрд╛рд╖рд╛рдХ рдкрд╕рдВрдж рдмрджрд▓рд┐ рд╕рдХреИрдд рдЫреА',
            preview: 'рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди',
            sampleText: 'рдирдореВрдирд╛ рдкрд╛рда',
            selectThis: 'рдИ рднрд╛рд╖рд╛ рдЪреБрдиреВ',
            confirmLanguage: 'рднрд╛рд╖рд╛ рдЪрдпрдирдХ рдкреБрд╖реНрдЯрд┐ рдХрд░реВ',
            confirmMessage: 'рдХреА рдЕрд╣рд╛рдБ рд╕рддреНрдпрдореЗ рдПрдХрд░рд╛ рдЕрдкрди рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛рдХ рд░реВрдк рдореЗ рд╕реЗрдЯ рдХрд░рдм рдЪрд╛рд╣реИрдд рдЫреА?',
            cancel: 'рд░рджреНрдж рдХрд░реВ',
            confirm: 'рдкреБрд╖реНрдЯрд┐ рдХрд░реВ',
            signin: 'рд╕рд╛рдЗрди рдЗрди'
        }
    },
    ne: {
        name: 'Nepali',
        nativeName: 'рдиреЗрдкрд╛рд▓реА',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'West Bengal, Sikkim',
        speakers: '2.9M+',
        translations: {
            welcome: 'CropGuard AI рдорд╛ рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╕реНрд╡рд╛рдЧрдд рдЫ',
            features: 'AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдмрд╛рд▓реА рд░реЛрдЧ рдкрд╣рд┐рдЪрд╛рди',
            dashboard: 'рддрдкрд╛рдИрдВрдХреЛ рдХреГрд╖рд┐ рдбреНрдпрд╛рд╕рдмреЛрд░реНрдб',
            selectLanguage: 'рдЖрдлреНрдиреЛ рднрд╛рд╖рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН',
            languageDescription: 'CropGuard AI рд╕рдБрдЧ рдЬрд╛рд░реА рд░рд╛рдЦреНрди рдЖрдлреНрдиреЛ рдордирдкрд░реНрдиреЗ рднрд╛рд╖рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН',
            searchLanguages: 'рднрд╛рд╖рд╛рд╣рд░реВ рдЦреЛрдЬреНрдиреБрд╣реЛрд╕реН...',
            popularLanguages: 'рд▓реЛрдХрдкреНрд░рд┐рдп рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рд╣рд░реВ',
            allLanguages: 'рд╕рдмреИ рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рд╣рд░реВ',
            continue: 'рдЬрд╛рд░реА рд░рд╛рдЦреНрдиреБрд╣реЛрд╕реН',
            languageNote: 'рддрдкрд╛рдИрдВ рдЬреБрдирд╕реБрдХреИ рдмреЗрд▓рд╛ рд╕реЗрдЯрд┐рдЩрдорд╛ рдЖрдлреНрдиреЛ рднрд╛рд╖рд╛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдкрд░рд┐рд╡рд░реНрддрди рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ',
            preview: 'рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди',
            sampleText: 'рдирдореБрдирд╛ рдкрд╛рда',
            selectThis: 'рдпреЛ рднрд╛рд╖рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН',
            confirmLanguage: 'рднрд╛рд╖рд╛ рдЫрдиреЛрдЯрдХреЛ рдкреБрд╖реНрдЯрд┐ рдЧрд░реНрдиреБрд╣реЛрд╕реН',
            confirmMessage: 'рдХреЗ рддрдкрд╛рдИрдВ рд╡рд╛рд╕реНрддрд╡рдореИ рдпрд╕рд▓рд╛рдИ рдЖрдлреНрдиреЛ рдордирдкрд░реНрдиреЗ рднрд╛рд╖рд╛рдХреЛ рд░реВрдкрдорд╛ рд╕реЗрдЯ рдЧрд░реНрди рдЪрд╛рд╣рдиреБрд╣реБрдиреНрдЫ?',
            cancel: 'рд░рджреНрдж рдЧрд░реНрдиреБрд╣реЛрд╕реН',
            confirm: 'рдкреБрд╖реНрдЯрд┐ рдЧрд░реНрдиреБрд╣реЛрд╕реН',
            signin: 'рд╕рд╛рдЗрди рдЗрди'
        }
    },
    sa: {
        name: 'Sanskrit',
        nativeName: 'рд╕рдВрд╕реНрдХреГрддрдореН',
        flag: 'ЁЯЗоЁЯЗ│',
        rtl: false,
        region: 'Classical Language',
        speakers: '25K+',
        translations: {
            welcome: 'CropGuard AI рдордзреНрдпреЗ рднрд╡рддрд╛рдВ рд╕реНрд╡рд╛рдЧрддрдореН',
            features: 'AI-рдЪрд╛рд▓рд┐рдд рдХреГрд╖рд┐ рд░реЛрдЧ рдирд┐рджрд╛рдирдореН',
            dashboard: 'рднрд╡рддрд╛рдВ рдХреГрд╖рд┐ рдлрд▓рдХрдореН',
            selectLanguage: 'рд╕реНрд╡реАрдпрдВ рднрд╛рд╖рд╛рдВ рдЪрд┐рдиреБрдд',
            languageDescription: 'CropGuard AI рд╕рд╣ рдЖрдЧреЗ рдЧрдиреНрддреБрдВ рд╕реНрд╡реАрдпрдВ рд░реБрдЪрд┐рддрд╛рдВ рднрд╛рд╖рд╛рдВ рдЪрд┐рдиреБрдд',
            searchLanguages: 'рднрд╛рд╖рд╛рдГ рдЕрдиреНрд╡рд┐рд╖реНрдпрддрд╛рдореН...',
            popularLanguages: 'рд▓реЛрдХрдкреНрд░рд┐рдпрд╛рдГ рднрд╛рд░рддреАрдпрд╛рдГ рднрд╛рд╖рд╛рдГ',
            allLanguages: 'рд╕рд░реНрд╡рд╛рдГ рднрд╛рд░рддреАрдпрд╛рдГ рднрд╛рд╖рд╛рдГ',
            continue: 'рдЖрдЧреЗ рдЧрдЪреНрдЫрдд',
            languageNote: 'рднрд╡рд╛рдиреН рдХрджрд╛рдкрд┐ рдирд┐рдпрдиреНрддреНрд░рдгреЗрд╖реБ рд╕реНрд╡реАрдпрдВ рднрд╛рд╖рд╛-рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдВ рдкрд░рд┐рд╡рд░реНрддрдпрд┐рддреБрдВ рд╢рдХреНрдиреЛрддрд┐',
            preview: 'рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрдирдореН',
            sampleText: 'рдирдореВрдирд╛ рдкрд╛рдардГ',
            selectThis: 'рдЗрдорд╛рдВ рднрд╛рд╖рд╛рдВ рдЪрд┐рдиреБрдд',
            confirmLanguage: 'рднрд╛рд╖рд╛ рдЪрдпрдирд╕реНрдп рдкреБрд╖реНрдЯрд┐рдВ рдХрд░реЛрддреБ',
            confirmMessage: 'рдХрд┐рдВ рднрд╡рд╛рдиреН рд╡рд╛рд╕реНрддрд╡реЗ рдЗрдорд╛рдВ рд╕реНрд╡реАрдпрдВ рд░реБрдЪрд┐рддрд╛рдВ рднрд╛рд╖рд╛рдВ рдХрд░реНрддреБрдореН рдЗрдЪреНрдЫрддрд┐?',
            cancel: 'рдирд┐рд░рд╕реНрдпрддрд╛рдореН',
            confirm: 'рдкреБрд╖реНрдЯрд┐рдВ рдХрд░реЛрддреБ',
            signin: 'рдкреНрд░рд╡реЗрд╢рдГ'
        }
    }
};

document.addEventListener('DOMContentLoaded', function() {
    initLanguageSelection();
    setupEventListeners();
    populateLanguages();
    setupSearch();
});

function initLanguageSelection() {
    // Check for saved language preference
    const savedLanguage = localStorage.getItem('preferredLanguage');
    if (savedLanguage && languageData[savedLanguage]) {
        selectedLanguage = savedLanguage;
        // Could redirect to main app here
    }
    
    // Convert language data to array for easier handling
    allLanguages = Object.entries(languageData).map(([code, data]) => ({
        code,
        ...data
    }));
    
    // Add entrance animations
    setTimeout(() => {
        const container = document.querySelector('.language-container');
        container.classList.add('loaded');
    }, 100);
}

function setupEventListeners() {
    const continueBtn = document.getElementById('continueBtn');
    const searchInput = document.getElementById('languageSearch');
    
    continueBtn.addEventListener('click', showConfirmationModal);
    searchInput.addEventListener('input', handleSearch);
    
    // Close modal on outside click
    document.addEventListener('click', function(e) {
        const modal = document.getElementById('confirmationModal');
        if (e.target === modal) {
            closeConfirmation();
        }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', handleKeyboardNavigation);
}

function populateLanguages() {
    const languagesGrid = document.getElementById('languagesGrid');
    
    // Create language cards for all languages except popular ones
    const popularLanguageCodes = ['hi', 'en', 'bn', 'te', 'mr', 'ta'];
    const otherLanguages = allLanguages.filter(lang => !popularLanguageCodes.includes(lang.code));
    
    otherLanguages.forEach((language, index) => {
        const card = createLanguageCard(language, false);
        card.style.animationDelay = `${(index * 0.1) + 0.7}s`;
        languagesGrid.appendChild(card);
    });
    
    // Setup popular language cards
    setupPopularLanguageCards();
}

function setupPopularLanguageCards() {
    const popularCards = document.querySelectorAll('.language-card.popular');
    
    popularCards.forEach(card => {
        const langCode = card.dataset.lang;
        const language = languageData[langCode];
        
        if (language) {
            setupLanguageCard(card, { code: langCode, ...language });
        }
    });
}

function createLanguageCard(language, isPopular = false) {
    const card = document.createElement('div');
    card.className = `language-card${isPopular ? ' popular' : ''}`;
    card.dataset.lang = language.code;
    card.dataset.name = language.name;
    
    card.innerHTML = `
        <div class="flag">${language.flag}</div>
        <div class="language-info">
            <h4>${language.nativeName}</h4>
            <span>${language.name}</span>
        </div>
        <div class="selection-indicator">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
    `;
    
    setupLanguageCard(card, language);
    return card;
}

function setupLanguageCard(card, language) {
    // Selection handler
    card.addEventListener('click', () => selectLanguage(language.code, card));
    
    // Preview handler (right-click or long press on mobile)
    card.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        showLanguagePreview(language);
    });
    
    // Mobile long press for preview
    let pressTimer;
    card.addEventListener('touchstart', (e) => {
        pressTimer = setTimeout(() => {
            showLanguagePreview(language);
            navigator.vibrate && navigator.vibrate(50); // Haptic feedback
        }, 500);
    });
    
    card.addEventListener('touchend', () => {
        clearTimeout(pressTimer);
    });
    
    card.addEventListener('touchmove', () => {
        clearTimeout(pressTimer);
    });
    
    // Preview button
    const previewBtn = document.createElement('button');
    previewBtn.className = 'preview-btn';
    previewBtn.innerHTML = 'ЁЯСБя╕П';
    previewBtn.title = 'Preview this language';
    previewBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        showLanguagePreview(language);
    });
    
    card.appendChild(previewBtn);
    
    // RTL support
    if (language.rtl) {
        card.classList.add('rtl');
        card.dir = 'rtl';
    }
}

function selectLanguage(languageCode, cardElement) {
    // Update selected language
    selectedLanguage = languageCode;
    
    // Update visual selection
    document.querySelectorAll('.language-card').forEach(card => {
        card.classList.remove('selected');
    });
    cardElement.classList.add('selected');
    
    // Enable continue button
    const continueBtn = document.getElementById('continueBtn');
    continueBtn.disabled = false;
    
    // Add pulse animation to continue button
    continueBtn.classList.add('pulse');
    setTimeout(() => continueBtn.classList.remove('pulse'), 1000);
    
    // Update interface language preview
    updateInterfacePreview(languageCode);
    
    // Save selection temporarily
    sessionStorage.setItem('tempLanguageSelection', languageCode);
    
    // Show success feedback
    showMessage(`${languageData[languageCode].nativeName} selected`, 'success');
}

function updateInterfacePreview(languageCode) {
    const language = languageData[languageCode];
    if (!language) return;
    
    // Update sample elements on the page
    const elementsToUpdate = document.querySelectorAll('[data-i18n]');
    elementsToUpdate.forEach(element => {
        const key = element.dataset.i18n;
        if (language.translations[key]) {
            element.textContent = language.translations[key];
        }
    });
    
    // Update placeholder texts
    const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
    placeholderElements.forEach(element => {
        const key = element.dataset.i18nPlaceholder;
        if (language.translations[key]) {
            element.placeholder = language.translations[key];
        }
    });
    
    // Update document direction for RTL languages
    if (language.rtl) {
        document.documentElement.dir = 'rtl';
        document.body.classList.add('rtl');
    } else {
        document.documentElement.dir = 'ltr';
        document.body.classList.remove('rtl');
    }
}

function showLanguagePreview(language) {
    currentPreviewLanguage = language;
    const preview = document.getElementById('languagePreview');
    
    // Update preview content
    document.querySelector('.preview-flag').textContent = language.flag;
    document.getElementById('previewLanguageName').textContent = language.name;
    document.getElementById('previewLanguageNative').textContent = language.nativeName;
    
    // Update sample texts
    document.getElementById('sampleWelcome').textContent = language.translations.welcome;
    document.getElementById('sampleFeatures').textContent = language.translations.features;
    document.getElementById('sampleDashboard').textContent = language.translations.dashboard;
    
    // Show preview
    preview.classList.add('active');
    
    // Add keyboard focus to first focusable element
    const firstFocusable = preview.querySelector('button');
    if (firstFocusable) {
        setTimeout(() => firstFocusable.focus(), 300);
    }
}

function closePreview() {
    const preview = document.getElementById('languagePreview');
    preview.classList.remove('active');
    currentPreviewLanguage = null;
}

function selectPreviewLanguage() {
    if (currentPreviewLanguage) {
        const card = document.querySelector(`[data-lang="${currentPreviewLanguage.code}"]`);
        if (card) {
            selectLanguage(currentPreviewLanguage.code, card);
        }
        closePreview();
    }
}

function handleSearch(event) {
    const searchTerm = event.target.value.toLowerCase().trim();
    const languageCards = document.querySelectorAll('.language-card');
    
    if (!searchTerm) {
        // Show all cards
        languageCards.forEach((card, index) => {
            card.style.display = 'flex';
            card.style.animation = `slideInUp 0.3s ease-out ${index * 0.05}s both`;
        });
        return;
    }
    
    // Filter and show matching cards
    let visibleCount = 0;
    languageCards.forEach(card => {
        const langCode = card.dataset.lang;
        const langName = card.dataset.name.toLowerCase();
        const language = languageData[langCode];
        const nativeName = language ? language.nativeName.toLowerCase() : '';
        
        const matches = langName.includes(searchTerm) || 
                       nativeName.includes(searchTerm) || 
                       langCode.includes(searchTerm);
        
        if (matches) {
            card.style.display = 'flex';
            card.style.animation = `slideInRight 0.4s ease-out ${visibleCount * 0.05}s both`;
            card.classList.add('search-result');
            visibleCount++;
        } else {
            card.style.display = 'none';
            card.classList.remove('search-result');
        }
    });
    
    // Show "no results" message if needed
    showSearchResults(visibleCount, searchTerm);
}

function showSearchResults(count, searchTerm) {
    const existingMessage = document.querySelector('.search-message');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    if (count === 0) {
        const message = document.createElement('div');
        message.className = 'search-message';
        message.innerHTML = `
            <div class="no-results">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
                    <path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M8 11H14M11 8V14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
                <h4>No languages found</h4>
                <p>No languages match "${searchTerm}". Try a different search term.</p>
            </div>
        `;
        document.getElementById('languagesGrid').appendChild(message);
    }
}

function setupSearch() {
    const searchInput = document.getElementById('languageSearch');
    
    // Add search suggestions
    const suggestions = ['hindi', 'bengali', 'telugu', 'marathi', 'tamil', 'gujarati', 'kannada', 'malayalam', 'punjabi', 'urdu'];
    let currentSuggestionIndex = 0;
    
    // Placeholder animation
    function animatePlaceholder() {
        const basePlaceholder = languageData.en.translations.searchLanguages;
        searchInput.placeholder = `${basePlaceholder} (e.g., ${suggestions[currentSuggestionIndex]})`;
        currentSuggestionIndex = (currentSuggestionIndex + 1) % suggestions.length;
    }
    
    // Start placeholder animation
    setInterval(animatePlaceholder, 3000);
    
    // Focus enhancement
    searchInput.addEventListener('focus', function() {
        this.parentElement.style.transform = 'scale(1.02)';
    });
    
    searchInput.addEventListener('blur', function() {
        this.parentElement.style.transform = 'scale(1)';
    });
}

function showConfirmationModal() {
    if (!selectedLanguage) return;
    
    const modal = document.getElementById('confirmationModal');
    const language = languageData[selectedLanguage];
    
    // Update modal content
    document.querySelector('.confirmation-flag').textContent = language.flag;
    document.getElementById('confirmationLanguageName').textContent = language.name;
    document.getElementById('confirmationLanguageNative').textContent = language.nativeName;
    
    // Show modal
    modal.classList.add('active');
    
    // Focus first button
    const firstBtn = modal.querySelector('button');
    if (firstBtn) {
        setTimeout(() => firstBtn.focus(), 100);
    }
}

function closeConfirmation() {
    const modal = document.getElementById('confirmationModal');
    modal.classList.remove('active');
}

function confirmLanguageSelection() {
    if (!selectedLanguage) return;
    
    // Save language preference
    localStorage.setItem('preferredLanguage', selectedLanguage);
    localStorage.setItem('languageData', JSON.stringify(languageData[selectedLanguage]));
    
    // Show success message
    const languageName = languageData[selectedLanguage].nativeName;
    showMessage(`Language set to ${languageName}! Redirecting...`, 'success');
    
    // Close modal
    closeConfirmation();
    
    // Update continue button
    const continueBtn = document.getElementById('continueBtn');
    continueBtn.innerHTML = 'Loading...';
    continueBtn.disabled = true;
    
    // Redirect to appropriate page
    setTimeout(() => {
        const isLoggedIn = localStorage.getItem('isLoggedIn');
        const onboardingCompleted = localStorage.getItem('onboardingCompleted');
        
        if (isLoggedIn) {
            window.location.href = '../index.html';
        } else if (onboardingCompleted) {
            window.location.href = 'login.html';
        } else {
            window.location.href = 'register.html';
        }
    }, 1500);
}

function handleKeyboardNavigation(event) {
    const preview = document.getElementById('languagePreview');
    const modal = document.getElementById('confirmationModal');
    
    switch (event.key) {
        case 'Escape':
            if (modal.classList.contains('active')) {
                closeConfirmation();
            } else if (preview.classList.contains('active')) {
                closePreview();
            }
            break;
            
        case 'Enter':
            if (modal.classList.contains('active')) {
                confirmLanguageSelection();
            } else if (selectedLanguage && document.activeElement === document.getElementById('continueBtn')) {
                showConfirmationModal();
            }
            break;
            
        case '/':
            event.preventDefault();
            document.getElementById('languageSearch').focus();
            break;
    }
}

function showMessage(message, type = 'info') {
    const messageElement = document.createElement('div');
    messageElement.className = `message message-${type}`;
    messageElement.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 2rem;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        z-index: 10000;
        max-width: 400px;
        animation: slideInRight 0.3s ease-out;
        font-weight: 500;
    `;
    
    switch (type) {
        case 'success':
            messageElement.style.background = 'var(--green-main)';
            messageElement.style.color = 'white';
            break;
        case 'warning':
            messageElement.style.background = '#ffaa00';
            messageElement.style.color = 'white';
            break;
        case 'error':
            messageElement.style.background = '#ff4444';
            messageElement.style.color = 'white';
            break;
        default:
            messageElement.style.background = 'var(--secondary-color)';
            messageElement.style.color = 'var(--text-color)';
            messageElement.style.border = '1px solid var(--border-color)';
            break;
    }
    
    messageElement.textContent = message;
    document.body.appendChild(messageElement);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        messageElement.style.animation = 'slideOutRight 0.3s ease-out';
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.remove();
            }
        }, 300);
    }, 3000);
}

// Add required CSS for search message and other animations
const style = document.createElement('style');
style.textContent = `
    .search-message {
        grid-column: 1 / -1;
        text-align: center;
        padding: 3rem;
        animation: fadeIn 0.3s ease-out;
    }
    
    .no-results svg {
        color: var(--text-secondary);
        margin-bottom: 1rem;
    }
    
    .no-results h4 {
        color: var(--text-color);
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
    
    .no-results p {
        color: var(--text-secondary);
    }
    
    .preview-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: var(--secondary-color);
        border: 1px solid var(--border-color);
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 14px;
    }
    
    .language-card:hover .preview-btn {
        opacity: 1;
    }
    
    .preview-btn:hover {
        background: var(--green-main);
        color: white;
        border-color: var(--green-main);
    }
    
    @keyframes slideInRight {
        from { opacity: 0; transform: translateX(100px); }
        to { opacity: 1; transform: translateX(0); }
    }
    
    @keyframes slideOutRight {
        from { opacity: 1; transform: translateX(0); }
        to { opacity: 0; transform: translateX(100px); }
    }
`;
document.head.appendChild(style);

// Export functions for testing
window.languageFunctions = {
    selectLanguage,
    showLanguagePreview,
    confirmLanguageSelection,
    updateInterfacePreview,
    showMessage
};